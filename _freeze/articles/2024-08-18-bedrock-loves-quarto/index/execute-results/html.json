{
  "hash": "b31c81433d6fbd99b723f78c4c0de95a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\n# Front Matter\ntitle: \"Bedrock ‚ù§Ô∏è Quarto\"\ndescription: \"Why I chose [Quarto](https://quarto.org/) for building this website.\"\nauthor: \"Joost Gevaert\"\ndate: \"2024-08-18\"\ndate-modified: \"2023-08-22\"\ncategories: [quarto]\nimage: \"quarto.png\"\n\n# Quarto settings\njupyter: python3\nexecute:\n  eval: true\nformat:\n  html:\n    code-fold: true\n    # code-annotations: true\n---\n\n[Quarto](https://quarto.org/) makes it really easy to set up a smoothly working and beautiful website. It took me less than 3 days to set up Bedrock's website with:\n\n1. custom [Home](/index.qmd) landing page,\n2. a methodology for efficiently creating feature-rich [Documentation](/docs/index.qmd),\n3. \"blog\" under [Articles](/articles.qmd),\n4. [Community](/community.qmd) page,\n5. Help ‚ñº menu,\n6. [About](/about.qmd) page,\n7. and GitHub links to:\n   \n   - Bedrock's home on GitHub ([NavBar](#website-navigation) & Footer),\n   - Page specific \"View source\", \"Edit this page\", \"Report an issue\" GitHub links (Right SideBar) for documentation pages and articles, to make it as easy as possible for people to contribute to Bedrock's documentation or correct spelling mistakes in this article üòÅ.\n\nQuarto makes it easy to implement many features that are essential for modern (docs) websites, see below ü§©. Building all these features from without handy tooling is, ... daunting.\n\nOther tools I looked at:\n\n- [Sphinx](https://www.sphinx-doc.org/en/master/): I find Sphinx complicated to set up. (highlight: [Strawberry](https://strawberry.rocks/docs))\n- [MkDocs](https://www.mkdocs.org/): much easier to set up than Sphinx, but lacks many of the awesome features that come for free with Quarto. (highlight: [FastAPI](https://fastapi.tiangolo.com/))\n- Documentation sites based on JavaScript frameworks like Vue's [VuePress](https://vuepress.vuejs.org/) or Astro's [StarLight](https://starlight.astro.build/): for a web dev noob like me these feel like starting from scratch, because there's always stuff you need to create components for e.g. to get the desired level of interactivity or for the landing page. Moreover, I wouldn't know how to approach integration with Python.\n\n## Quarto?\n\n> Nice intro, but ... Quarto?\n\n- What\n- How: pandoc\n- Why\n- Who: Posix + Community\n- When\n\n## Markdown\n\nMarkdown is an easy to read and write text format:\n\n- It's _plain text_ so works well with version control\n- It can be **rendered** into HTML (this website), PDF, Word (.docx), PowerPoint (.pptx) presentation and more...\n- Many very useful [basic features](https://quarto.org/docs/authoring/markdown-basics.html), see below.\n- Learn more at: <https://quarto.org/docs/authoring/>\n\n### [Equations](https://quarto.org/docs/authoring/markdown-basics.html#equations)\n\nUse LaTeX to write equations:\n$$\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n$$ {#eq-quadratic}\n\n### [Source Code](https://quarto.org/docs/authoring/markdown-basics.html#source-code)\n\nSee [Static Code, Computed Code & Interactive Docs](#static-code-computed-code--interactive-docs) below.\n\n### [Lists](https://quarto.org/docs/authoring/markdown-basics.html#lists)\n\nQuarto's docs list some pretty awesome lists that I wasn't aware of, and creative ways of using them. My highlight, definitions:\n\nterm or symbol, e.g. $\\alpha$\n: definition\n  \n### [Footnotes](https://quarto.org/docs/authoring/markdown-basics.html#footnotes)\n\nFootnotes in a Quarto website get a hover preview ü§©^[Hey, that tickles ü§£]\n\n### [\"Raw Content\"](https://quarto.org/docs/authoring/markdown-basics.html#raw-content)\n\nA somewhat cryptic way of saying that you can use this to  to say that this is how you can embed other websites . For example:\n\n````{.markdown}\n```{=html}\n<iframe title=\"Kai Tak - Speckle\" src=\"https://app.speckle.systems/projects/013aaf06e7/models/0fa0287ba8,a739490298,c59c767566#embed=%7B%22isEnabled%22%3Atrue%7D\" width=\"100%\" height=\"500\" frameborder=\"0\"></iframe>\n```\n````\n\nembeds ‚¨áÔ∏è\n\n```{=html}\n<iframe title=\"Kai Tak - Speckle\" src=\"https://app.speckle.systems/projects/013aaf06e7/models/0fa0287ba8,a739490298,c59c767566#embed=%7B%22isEnabled%22%3Atrue%7D\" width=\"100%\" height=\"500\" frameborder=\"0\"></iframe>\n```\n\n## Static Code, Computed Code & Interactivity\n\nA [Quarto Website](https://quarto.org/docs/websites/) project produces HTML documents (see `_site` directory) as output from the Quarto (`.qmd`), Markdown (`.md`), or Jupyter Notebook (`.ipynb`) files, which are then put together into a website with all the [features a modern (docs) site needs](#awesome-features-for-modern-websites) by Quarto. [Code blocks in these HTML documents](https://quarto.org/docs/output-formats/html-code.html) comes in 2 types:\n\n1. [Static Code](https://quarto.org/docs/authoring/markdown-basics.html#source-code). Static code is not executed by Quarto when the website is generated, and can therefore not produce output such as figures. Static code blocks can be generated like this:\n   ````{.markdown}\n  ```{.python}\n  print(\"This is a static code block. The code in this block will not be executed.\")\n  ```\n  ````\n  Result üëá  \n\n```{.python}\nprint(\"This is a static code block. The code in this block will not be executed.\")\n```\n\n2. [Computed Code](https://quarto.org/docs/computations/python.html). Computed code is executed by Quarto when the website it generated, and can therefore produce output such as figures. These figures can also be made interactive when you use a library such as `plotly`. Computed code blocks can be generated like this:  \n   ````{.markdown}\n  ```{{python}}\n  print(\"This is a computed code block. The code block will be executed.\")\n  ```\n  ````\n  Result üëá\n\n::: {#e1fcb823 .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"This is a computed code block. The code block will be executed.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is a computed code block. The code block will be executed.\n```\n:::\n:::\n\n\nAs you can see, this is a bit tricky, because the difference between a code block being static (`{.python}`) and computed (`{python}`) is only a single \".\".\n\nBelow a little more exciting example of a computed Python code block. @fig-polar actually comes from Quarto's [Get Started Guide](https://quarto.org/docs/get-started/hello/jupyter.html).\n\n::: {#cell-fig-polar .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](index_files/figure-html/fig-polar-output-1.png){#fig-polar width=450 height=439}\n:::\n:::\n\n\n### Code Annotations\n\nQuarto also has beatiful code annotations:\n\n```{.json}\n{\n  \"location\": {\n    \"attributes\": {},\n    \"geometry\": \"Point / 3D LineString\",    // <1>\n    \"children\": {}\n  }\n}\n```\n1. The geometry of a borehole location is best represented by a \"3D LineString\". However, when visualizing the locations for which GI data is available on a 2D map, vertical lines vanish, in such cases using \"Point\" geometry for the GI location is better.\n\n\n## Awesome Features for Modern Websites\n\nSo, [Markdown](#markdown) provides a great developer i.e. contributor experience, and the [Code & Interactivity](#static-code-computed-code--interactivity) features make Quarto documentation useful and engaging, but that doesn't give you a good website yet. Therefore, this section highlights some of the awesome Quarto features that are essential for modern (docs) websites.\n\n### Website Navigation\n\n- NavBar\n  - [Logo](https://quarto.org/docs/reference/projects/websites.html#navbar). Lacks Quarto docs though, so see the Quarto config of this website [`_quarto.yml`](https://github.com/bedrock-gi/bedrock-web/blob/main/_quarto.yml) on GitHub.\n  - [Help ‚ñº menu](https://quarto.org/docs/websites/website-navigation.html#top-navigation)\n  - [GitHub & Socials](https://quarto.org/docs/websites/website-navigation.html#navbar-tools)\n  - [Website Search](https://quarto.org/docs/websites/website-search.html)\n- Right Sidebar\n  - See \"On this Page\", and [Table of Contents](https://quarto.org/docs/reference/formats/html.html#table-of-contents) in the Quarto docs.\n  - Page specific [GitHub Links](https://quarto.org/docs/websites/website-navigation.html#github-links)\n- [Left Sidebar](https://quarto.org/docs/websites/website-navigation.html#side-navigation)  \n  Relevant for Bedrock's Documentation, but not yet implemented. Look at [Hybrid Navigation](https://quarto.org/docs/websites/website-navigation.html#hybrid-navigation), meaning Sidebar Navigation for inside the Documentation part of the website only, while maintaining the NavBar.\n\n::: {#wrn-no-search-placeholder .callout-warning}\n\n## üêû No Search Placeholder\n\nWhen editing the [search appearance](https://quarto.org/docs/websites/website-search.html#search-appearance) when using a search `textbox`, the [\"Search\" placeholder](https://quarto.org/docs/websites/website-search.html#search-appearance:~:text=language%3A%20%0A%20%20search%2Dbox%2Dplaceholder%3A%20Search) is not showing up in the website.\n\n:::\n\n### Cross-References with Hover Preview\n\nThe way that [cross-referencing](https://quarto.org/docs/authoring/cross-references.html) is implemented in Quarto is very slick as well:\n\n- [Callout Blocks](https://quarto.org/docs/authoring/callouts.html), e.g. @wrn-no-search-placeholder\n- [Figures](https://quarto.org/docs/authoring/cross-references.html#figures):, e.g. @fig-polar\n- [Equations](https://quarto.org/docs/authoring/cross-references.html#equations), e.g. @eq-quadratic\n- The list above only highlights some of the [basics](https://quarto.org/docs/authoring/cross-references.html) of cross-referencing with Quarto. Learn more at: [Options](https://quarto.org/docs/authoring/cross-reference-options.html), [Div Syntaz](https://quarto.org/docs/authoring/cross-references-divs.html), [Custom Floats](https://quarto.org/docs/authoring/cross-references-custom.html)\n\n## Promising Features\n\nSeveral other Quarto features that I like and (might) want to make use of in the future:\n\n- [Tabsets](https://quarto.org/docs/output-formats/html-basics.html#tabsets)\n- [Dark Mode](https://quarto.org/docs/websites/website-tools.html#dark-mode)\n- [Diagrams](https://quarto.org/docs/authoring/diagrams.html)\n- In addition to [Reference Popups](https://quarto.org/docs/output-formats/html-basics.html#reference-popups), i.e. hover previews for [footnotes](#footnotes) and [cross-references](#cross-references-with-hover-preview), Quarto also has reference popups for citations.\n- [Links to Source Notebooks](https://quarto.org/docs/authoring/notebook-embed.html#linked-source-notebooks), such that you can open up a docs page that's based on a Jupyter Notebook directly in Google Colab (see [Notebook Embed # View Options](https://quarto.org/docs/authoring/notebook-embed.html#view-options) & [Reference > Formats > HTML Options # Links `notebook-view`](https://quarto.org/docs/reference/formats/html.html#links)).\n- [Open Graph](https://quarto.org/docs/websites/website-tools.html#open-graph) config for richer sharing of links to specific pages of websites.\n- [`quartodoc`](https://machow.github.io/quartodoc/get-started/overview.html) is a Python package for generating API reference documentation of a Python package with proper `docstrings` that is based on, and integrates with Quarto.\n- [Commenting](https://quarto.org/docs/output-formats/html-basics.html#commenting) such that you all can leave your thoughts right here üëá\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}